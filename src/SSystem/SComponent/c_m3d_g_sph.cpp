//
// Generated by dtk
// Translation Unit: c_m3d_g_sph.cpp
//

#include "SSystem/SComponent/c_m3d_g_sph.h"
#include "SSystem/SComponent/c_m3d.h"
#include "JSystem/JUtility/JUTAssert.h"
#include "MSL_C/float.h"

#define CHECK_FLOAT_CLASS(x) !(((sizeof(x) == sizeof(float)) ? __fpclassifyf((float)(x)) : __fpclassifyd( (double)(x)) ) == 1)
#define CHECK_FLOAT_RANGE(x) -1.0e32f < x && x < 1.0e32f

/* 8025238C-80252624       .text SetC__8cM3dGSphFRC4cXyz */
void cM3dGSph::SetC(const cXyz& pos) {
    JUT_ASSERT("c_m3d_g_cyl.cpp", 21, CHECK_FLOAT_CLASS(pos.x));
    JUT_ASSERT("c_m3d_g_cyl.cpp", 22, CHECK_FLOAT_CLASS(pos.y));
    JUT_ASSERT("c_m3d_g_cyl.cpp", 23, CHECK_FLOAT_CLASS(pos.z));
    JUT_ASSERT("c_m3d_g_cyl.cpp", 26, CHECK_FLOAT_RANGE(pos.x) && CHECK_FLOAT_RANGE(pos.y) && CHECK_FLOAT_RANGE(pos.z));
    mCenter = pos;
}

/* 80252624-80252750       .text SetR__8cM3dGSphFf */
void cM3dGSph::SetR(float r) {
    JUT_ASSERT("c_m3d_g_cyl.cpp", 23, CHECK_FLOAT_CLASS(r));
    JUT_ASSERT("c_m3d_g_cyl.cpp", 26, CHECK_FLOAT_RANGE(r));
}

/* 80252750-8025277C       .text cross__8cM3dGSphCFPC8cM3dGSphP4cXyz */
bool cM3dGSph::cross(const cM3dGSph* pOther, cXyz* pOut) const {
    return cM3d_Cross_SphSph(pOther, this, pOut);
}

/* 8025277C-802527AC       .text cross__8cM3dGSphCFPC8cM3dGCylP4cXyz */
bool cM3dGSph::cross(const cM3dGCyl* pOther, cXyz* pOut) const {
    f32 f;
    return cM3d_Cross_CylSph(pOther, this, pOut, &f);
}

/* 802527AC-802527D4       .text cross__8cM3dGSphCFPC8cM3dGSphPf */
bool cM3dGSph::cross(const cM3dGSph* pOther, f32* pOut) const {
    f32 f;
    return cM3d_Cross_SphSph(this, pOther, &f, pOut);
}
